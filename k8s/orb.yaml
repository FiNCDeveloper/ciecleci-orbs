# orb name: finc/k8s
version: 2.1
description: "FiNC Technologies kubernetes deploy toolbox"

orbs:
  kube-orb: circleci/kubernetes@0.11.0
  kustomize: finc/kustomize@0.0.1

commands:
  init-current-revision:
    description: "Gets the revision to roll back on failure."
    parameters:
      namespace:
        type: string
        description: "deploy target kubernetes namespace"
      resource-name:
        type: string
        description: "Specific deployment name. IMPORTANT: Currently supported only deployment. Do not supported daemonset, statefulset."
    steps:
      - kube-orb/install-kubectl
      - run:
          name: "Get current deployment revison"
          description: >
            The length of time to wait before ending the watch, zero means never.

            Any other values should contain a corresponding time unit (e.g. 1s, 2m,3h).
          command: |
            # NOTE:
            # Naming rule basics: namespace, deployment name is converted repository name to kebab-case.
            K8S_NAMESPACE="<< parameters.namespace >>"
            if [ -z "K8S_NAMESPACE" ]; then
              K8S_NAMESPACE=${CIRCLE_PROJECT_REPONAME//_/-}
            fi

            K8S_DEPLOYMENT=${CIRCLE_PROJECT_REPONAME//_/-}

            echo "export __FINC_K8S_NAMESPACE=${K8S_NAMESPACE}"  >> $BASH_ENV
            echo "export __FINC_K8S_DEPLOYMENT=${K8S_DEPLOYMENT}" >> $BASH_ENV
            echo "export __FINC_K8S_CONTAINER=${CIRCLE_PROJECT_REPONAME//_/-}" >> $BASH_ENV
            echo "export __FINC_BEFORE_DEPLOYMENT_REVISION=$(kubectl get -n $K8S_NAMESPACE deployment/$K8S_DEPLOYMENT -o=jsonpath='{.metadata.annotations.deployment\.kubernetes\.io/revision}')" >> $BASH_ENV
            echo "export __FINC_K8S_CANARY_BEFORE_DEPLOYMENT_REVISION=$(kubectl get --ignore-not-found -n $K8S_NAMESPACE deployment/$K8S_DEPLOYMENT-canary -o=jsonpath='{.metadata.annotations.deployment\.kubernetes\.io/revision}')" >> $BASH_ENV
            echo "export __FINC_K8S_INIT_FLAG__=1" >> $BASH_ENV

  rollback-deployment-on-fail:
    description: >
      "rollback deployment when on fail"
    parameters:
      rollback-target:
        description: "rollback target"
        type: enum
        enum: ["stable", "canary"]
    steps:
      - run:
          when: on_fail
          name: "rollback deployment"
          command: |
              case "<< parameters.rollback-target >>" in
                stable)
                  target="deployment/$__FINC_K8S_DEPLOYMENT"
                  rev="$__FINC_BEFORE_DEPLOYMENT_REVISION"
                  ;;
                canary)
                  target="deployment/$__FINC_K8S_DEPLOYMENT-canary"
                  rev="$__FINC_K8S_CANARY_BEFORE_DEPLOYMENT_REVISION"
                  ;;
              esac

              if [ -z "$rev" ]; then
                echo "[WARN] unknown before revision"
                exit
              fi

              CURRENT_REVISION=$(kubectl get -n "$__FINC_K8S_NAMESPACE" "$target" -o=jsonpath='{.metadata.annotations.deployment\.kubernetes\.io/revision}')
              if [[ -n "$target" && "$rev" != "$CURRENT_REVISION" ]]; then
                echo "rollback $target to revision: $rev"
                kubectl rollout undo --dry-run "$target" -n "$__FINC_K8S_NAMESPACE" --to-revision=$rev
              else
                echo "Did not unnecessary rollback as it. because same revision."
              fi

examples:
  rollback-deployment-on-fail:
    description: >
      rollback deployment revision if deploy fail.

      Requirements:
      - kubeconfig should be configured to connect to the cluster.
      - Execute 'init-current-revision' before deploy
    usage:
      version: 2.1
      orbs:
        finc-k8s: finc/k8s@0.0.1
        k8s: circleci/kubernetes@0.11.0
      jobs:
        build:
          docker:
            - image: circleci/golang:1.15
          steps:
            - init-current-revision:
                namespace: "example"
                resource-name: "example"
            - kube-orb/update-container-image:
                container-image-updates: example=example:latest
                namespace: example
                resource-name: deployment/example
            - rollback-deployment-on-fail:
                rollback-target: "stable"

